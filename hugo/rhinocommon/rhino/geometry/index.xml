<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rhino.Geometry on Hugo based API Site</title>
    <link>/apidocs/hugo/rhinocommon/rhino/geometry/</link>
    <description>Recent content in Rhino.Geometry on Hugo based API Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Mar 2020 15:34:14 +0000</lastBuildDate>
    
	<atom:link href="/apidocs/hugo/rhinocommon/rhino/geometry/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DevelopableSrf</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/developablesrf/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:18 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/developablesrf/</guid>
      <description>Namespace: Rhino.Geometry
Helpers for developable surface functions
public class DevelopableSrfMethods  static int GetLocalDevopableRuling(NurbsCurve rail0,double t0,Interval dom0,NurbsCurve rail1,double t1,Interval dom1,double t0_out,double t1_out) Finds minimum twist ruling between 2 curves at local domains Returns - -1: Error 0: Exact non-twisting ruling found between t0_out and t1_out 1: Ruling found between t0_out and t1_out that has less twist the ruling between t0 and t1 since 6.0 static bool RulingMinTwist(NurbsCurve rail0,double t0,Interval dom0,NurbsCurve rail1,double t1,Interval dom1,double t0_out,double t1_out,double cos_twist_out) Find a ruling from rail0(t0_out) to rail1(t1_out) that has the least twist across the ruling with t0_out in domain0 and t1_out in domain1.</description>
    </item>
    
    <item>
      <title>MeshExtruder</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshextruder/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:18 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshextruder/</guid>
      <description>Namespace: Rhino.Geometry
Extrudes a mesh and provides preview
public class MeshExtruder : IDisposableConstructors  MeshExtruder(Mesh inputMesh,IEnumerablecomponentIndices) Construct object to extrude given mesh faces, edges and ngons. since 6.3  Properties  bool EdgeBasedUVN Edge based UVN defines UVN directions according to boundary edge directions since 6.4 MeshExtruderFaceDirectionMode FaceDirectionMode Face direction mode determines how faces are oriented since 6.3 bool KeepOriginalFaces Whether or not to keep original faces. since 6.3 Line[] PreviewLines Gets Line objects to preview extruded mesh.</description>
    </item>
    
    <item>
      <title>Unroller</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/unroller/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:18 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/unroller/</guid>
      <description>Namespace: Rhino.Geometry
Represents the operation of unrolling a single surface.
public class UnrollerConstructors  Unroller(Brep brep) Initializes a new instance of the class with a brep. Unroller(Surface surface) Initializes a new instance of the class with surface.  Properties  double AbsoluteTolerance Gets or sets the absolute tolerance for the unrolling operation. Absolute tolerance is used in the evaluation of new entities, such as intersections, reprojections and splits.In the current implementation, absolute tolerance is used in tessellating rails, fitting curves and pulling back trims.</description>
    </item>
    
    <item>
      <title>Particle</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/particle/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:17 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/particle/</guid>
      <description>Namespace: Rhino.Geometry
Represents a simple particle. This base class only defines position and display properties (size, color, bitmap id). You will most likely create a class that derives from this particle class to perform some sort of physical simulation (movement over time or frames).
public class ParticleConstructors  Particle() Initializes a new instance of the class.  Properties  Color Color  int DisplayBitmapIndex  int Index Index in ParentSystem for this Particle.</description>
    </item>
    
    <item>
      <title>ParticleSystem</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/particlesystem/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:17 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/particlesystem/</guid>
      <description>Namespace: Rhino.Geometry
public class ParticleSystem : IEnumerable&amp;lt;Particle&amp;gt;Properties  BoundingBox BoundingBox  bool DisplaySizesInWorldUnits  bool DrawRequiresDepthSorting   Methods  bool Add(Particle particle) Adds a particle to this ParticleSystem. A Particle can only be in one system at a time. If the Particle already exists in a different system, this function will return false. You should remove the particle from the other system first before adding it. Returns - True if this particle was added to the system or if is already in the system.</description>
    </item>
    
    <item>
      <title>SweepOneRail</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/sweeponerail/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:17 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/sweeponerail/</guid>
      <description>Namespace: Rhino.Geometry
Utility class for generating Breps by sweeping cross section curves over a single rail curve. Note, this class has been superceeded by the Rhino.Geometry.Brep.CreateFromSweep static functions.
public class SweepOneRailConstructors  SweepOneRail()   Properties  double AngleToleranceRadians  bool ClosedSweep If the input rail is closed, ClosedSweep determines if the swept breps will also be closed. bool GlobalShapeBlending If true, the sweep is linearly blended from one end to the other, creating sweeps that taper from one cross-section curve to the other.</description>
    </item>
    
    <item>
      <title>SweepTwoRail</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/sweeptworail/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:17 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/sweeptworail/</guid>
      <description>Namespace: Rhino.Geometry
Utility class for generating Breps by sweeping cross section curves over two rail curves. Note, this class has been superceeded by the Rhino.Geometry.Brep.CreateFromSweep static functions.
public class SweepTwoRailConstructors  SweepTwoRail()   Properties  double AngleToleranceRadians Gets or sets the angle tolerance in radians. bool ClosedSweep If the input rails are closed, ClosedSweep determines if the swept Breps will also be closed. bool MaintainHeight Removes the association between the height scaling from the width scaling.</description>
    </item>
    
    <item>
      <title>ControlPoint</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/controlpoint/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/controlpoint/</guid>
      <description>Namespace: Rhino.Geometry
Represents control point geometry with three-dimensional position and weight.
Constructors  ControlPoint(double x,double y,double z) Constructs a new world 3-D, or Euclidean, control point. The 4-D representation is (x, y, z, 1.0). ControlPoint(double x,double y,double z,double weight) Constructs a new homogeneous control point, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w). ControlPoint(Point3d pt) Constructs a new world 3-D, or Euclidean, control point.</description>
    </item>
    
    <item>
      <title>Interpolator</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/interpolator/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/interpolator/</guid>
      <description>Namespace: Rhino.Geometry
Exposes a set of standard numeric interpolation algorithms.
public class Interpolator : RhinoList&amp;lt;double&amp;gt;Constructors  Interpolator() Constructs a new, empty Interpolator. Interpolator(IEnumerablecollection) Constructs an Interpolator from a collection of numbers. Interpolator(int initialCapacity) Constructs an empty Interpolator with a certain capacity. Interpolator(int amount,double defaultValue) Constructs a new Interpolator with a specified amount of numbers. Interpolator(RhinoListlist) Copy all the numbers from an existing RhinoList.  Properties  bool Cyclical Gets or sets a value indicating whether or not the values inside this Interpolator are to be treated as cyclical (i.</description>
    </item>
    
    <item>
      <title>Interval</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/interval/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/interval/</guid>
      <description>Namespace: Rhino.Geometry
Represents an interval in one-dimensional space, that is defined as two extrema or bounds.
 static - Shifts an interval by a specific amount (subtraction). Returns - A new interval with [T0-number, T1-number]. static - Shifts an interval by a specific amount (subtraction). Returns - A new interval with [number-T0, number-T1]. static != Determines whether the two Intervals have different values. Returns - True if the two intervals are different in any value; False if they are equal.</description>
    </item>
    
    <item>
      <title>NurbsCurve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/nurbscurve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/nurbscurve/</guid>
      <description>Namespace: Rhino.Geometry
Represents a Non Uniform Rational B-Splines (NURBS) curve.
[Serializable]public class NurbsCurve : Curve, IEpsilonComparable&amp;lt;NurbsCurve&amp;gt;Constructors  NurbsCurve(int dimension,bool rational,int order,int pointCount) Constructs a new NURBS curve with knot and CV memory allocated. NurbsCurve(int degree,int pointCount) Constructs a new NURBS curve with a specific degree and control point count. NurbsCurve(NurbsCurve other) Initializes a NURBS curve by copying its values from another NURBS curve.  Properties  bool HasBezierSpans Returns True if the NURBS curve has bezier spans (all distinct knots have multiplitity = degree) bool IsRational Gets a value indicating whether or not the curve is rational.</description>
    </item>
    
    <item>
      <title>NurbsSurface</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/nurbssurface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/nurbssurface/</guid>
      <description>Namespace: Rhino.Geometry
Represents a Non Uniform Rational B-Splines (NURBS) surface.
[Serializable]public class NurbsSurface : Surface, IEpsilonComparable&amp;lt;NurbsSurface&amp;gt;Constructors  NurbsSurface(NurbsSurface other) Initializes a new NURBS surface by copying the values from another surface.  Properties  bool IsRational Gets a value indicating whether or not the nurbs surface is rational. NurbsSurfaceKnotList KnotsU The U direction knot vector. NurbsSurfaceKnotList KnotsV The V direction knot vector. int OrderU Gets the order in the U direction.</description>
    </item>
    
    <item>
      <title>Point2d</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/point2d/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/point2d/</guid>
      <description>Namespace: Rhino.Geometry
Represents the two coordinates of a point in two-dimensional space, using -precision floating point numbers.
 static - Subtracts point2 from point1. Returns - A new vector that is point1 coordinatewise subtracted by point2. static - Subtracts a vector from a point. Returns - A new point that is coordinatewise subtracted by vector. static != Determines whether two have different values. Returns - True if the two points differ in any coordinate; False otherwise.</description>
    </item>
    
    <item>
      <title>Point3d</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/point3d/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/point3d/</guid>
      <description>Namespace: Rhino.Geometry
Represents the three coordinates of a point in three-dimensional space, using -precision floating point values.
 static - Computes the additive inverse of all coordinates in the point, and returns the new point. Returns - A point value that, when summed with the point input, yields the . static - Subtracts a point from another point. Returns - A new vector that is the difference of point minus vector.</description>
    </item>
    
    <item>
      <title>RTree</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/rtree/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/rtree/</guid>
      <description>Namespace: Rhino.Geometry
Represents a spatial search structure based on implementations of the R-tree algorithm by Toni Gutman.
public class RTree : IDisposableConstructors  RTree() Initializes a new, empty instance of the tree.  Properties  int Count Gets the number of items in this tree.  Methods  static RTree CreateFromPointArray(IEnumerablepoints) Constructs a new tree with an element for each pointcloud point. Returns - A new tree, or None on error.</description>
    </item>
    
    <item>
      <title>Silhouette</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/silhouette/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/silhouette/</guid>
      <description>Namespace: Rhino.Geometry
Information about silhouette curves that are generated from geometry (surfaces, brep faces, meshes)
public class SilhouetteProperties  Curve Curve 3D curve representing the shape of the silhouette. since 6.0 ComponentIndex GeometryComponentIndex Gets the component index corresponding with this silhouette curve. This field is only set when the entire silhouette curve is part of some geometry component. since 6.0 SilhouetteType SilhouetteType Gets the type of this silhouette curve. since 6.</description>
    </item>
    
    <item>
      <title>SpaceMorph</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/spacemorph/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/spacemorph/</guid>
      <description>Namespace: Rhino.Geometry
Represents a spacial, Euclidean morph.
public class SpaceMorphProperties  bool PreserveStructure True if the morph should be done in a way that preserves the structure of the geometry. In particular, for NURBS objects, True means that only the control points are moved. The PreserveStructure value does not affect the way meshes and points are morphed. The default is false. bool QuickPreview True if the morph should be done as quickly as possible because the result is being used for some type of dynamic preview.</description>
    </item>
    
    <item>
      <title>Sphere</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/sphere/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/sphere/</guid>
      <description>Namespace: Rhino.Geometry
Represents the plane and radius values of a sphere.
Constructors  Sphere(Plane equatorialPlane,double radius) Initializes a new sphere given the plane of the equator circle and radius. Sphere(Point3d center,double radius) Initializes a new sphere given center point and radius.  Properties  static Sphere Unset Gets a sphere with invalid members. BoundingBox BoundingBox Gets the world aligned boundingbox for this Sphere. If the Sphere is Invalid, an empty box is returned.</description>
    </item>
    
    <item>
      <title>SubD</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/subd/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/subd/</guid>
      <description>Namespace: Rhino.Geometry
Subdivision surface
[Serializable]public class SubD : GeometryBaseConstructors  SubD() Create a new instance of SubD geometry since 7.0  Properties  SubDEdgeList Edges All edges in this SubD since 7.0 SubDFaceList Faces All faces in this SubD since 7.0 bool IsSolid Test subd to see if the active level is a solid.
A &amp;ldquo;solid&amp;rdquo; is a closed oriented manifold, or a closed oriented manifold. since 7.0 SubDVertexList Vertices All vertices in this SubD since 7.</description>
    </item>
    
    <item>
      <title>SubDComponent</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/subdcomponent/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/subdcomponent/</guid>
      <description>Namespace: Rhino.Geometry
A part of SubD geometry. Common base class for vertices, faces, and edges
public class SubDComponentProperties  uint Id Unique id within the parent SubD for this item since 7.0 SubD ParentSubD SubD that this component belonds to since 7.0  </description>
    </item>
    
    <item>
      <title>SubDCreationOptions</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/subdcreationoptions/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/subdcreationoptions/</guid>
      <description>Namespace: Rhino.Geometry
Options used for creating a SubD
public class SubDCreationOptions : IDisposableConstructors  SubDCreationOptions() Create default options since 7.0  Properties  static SubDCreationOptions ConvexCornerAtMeshCorner Look for convex corners at sub-D vertices with 2 edges that have an included angle &amp;lt;= 90 degrees. since 7.0 static SubDCreationOptions InteriorCreaseAtMeshCrease Create an interior sub-D crease along coincident input mesh edges where the vertex normal directions at one end differ by at least 30 degrees.</description>
    </item>
    
    <item>
      <title>SubDEdge</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/subdedge/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/subdedge/</guid>
      <description>Namespace: Rhino.Geometry
Single edge of a SubD
public class SubDEdge : SubDComponentProperties  Line ControlNetLine Line representing the control net end points since 7.0 int FaceCount Number of faces for this edge since 7.0 SubDEdgeTag Tag identifies the type of subdivision edge since 7.0 SubDVertex VertexFrom Start vertex for this edge since 7.0 SubDVertex VertexTo End vertex for this edge since 7.0  Methods  SubDFace FaceAt(int index) Retrieve a SubDFace from this edge since 7.</description>
    </item>
    
    <item>
      <title>SubDVertex</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/subdvertex/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/subdvertex/</guid>
      <description>Namespace: Rhino.Geometry
Single vertex of a SubD
public class SubDVertex : SubDComponentProperties  Point3d ControlNetPoint Location of the &amp;ldquo;control net&amp;rdquo; point that this SubDVertex represents since 7.0 int EdgeCount Number of edges for this vertex since 7.0 IEnumerableEdges All edges that this vertex is part of since 7.0 int FaceCount Number of faces for this vertex since 7.0 SubDVertex Next Next vertex in linked list of vertices on this level since 7.</description>
    </item>
    
    <item>
      <title>SumSurface</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/sumsurface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/sumsurface/</guid>
      <description>Namespace: Rhino.Geometry
Represents a sum surface, or an extrusion of a curve along a curved path.
[Serializable]public class SumSurface : SurfaceMethods  static SumSurface Create(Curve curveA,Curve curveB) Constructs a new sum surface by extruding a curve A along a path B. Returns - A new sum surface on success; None on failure.  </description>
    </item>
    
    <item>
      <title>Surface</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/surface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/surface/</guid>
      <description>Namespace: Rhino.Geometry
Represents a base class that is common to most RhinoCommon surface types. A surface represents an entity that can be all visited by providing two independent parameters, usually called (u, v), or sometimes (s, t).
[Serializable]public class Surface : GeometryBaseProperties  bool IsSolid Gets a values indicating whether a surface is solid.  Methods  static Surface CreateExtrusion(Curve profile,Vector3d direction) Constructs a surface by extruding a curve along a vector.</description>
    </item>
    
    <item>
      <title>SurfaceCurvature</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/surfacecurvature/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/surfacecurvature/</guid>
      <description>Namespace: Rhino.Geometry
Maintains computed information for surface curvature evaluation.
public class SurfaceCurvatureProperties  double Gaussian Gets the Gaussian curvature value at UV. double Mean Gets the Mean curvature value at UV. Vector3d Normal Gets the surface normal at UV. Point3d Point Gets the surface point at UV. Point2d UVPoint Gets the UV location where the curvature was computed.  Methods  Vector3d Direction(int direction) Gets the principal curvature direction vector.</description>
    </item>
    
    <item>
      <title>TextEntity</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/textentity/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/textentity/</guid>
      <description>Namespace: Rhino.Geometry
[Serializable]public class TextEntity : AnnotationBaseConstructors  TextEntity() Initializes a new instance of the class.  Properties  TextJustification Justification Gets or sets the justification of text in relation to its base point. TextHorizontalAlignment TextHorizontalAlignment  since 6.0 TextOrientation TextOrientation  since 6.0 TextVerticalAlignment TextVerticalAlignment  since 6.0  Methods  static TextEntity Create(string text,Plane plane,DimensionStyle style,bool wrapped,double rectWidth,double rotationRadians) Create Text geometry or None if input is invalid since 6.</description>
    </item>
    
    <item>
      <title>Torus</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/torus/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/torus/</guid>
      <description>Namespace: Rhino.Geometry
Represents the value of a plane and two radii in a torus that is oriented in three-dimensional space.
Constructors  Torus(Plane basePlane,double majorRadius,double minorRadius) Initializes a new Torus from base pane and two radii.  Properties  static Torus Unset Gets an invalid Torus. bool IsValid Gets a value indicating whether this torus is valid. double MajorRadius Gets or sets the radius of the circle that lies at the heart of the torus.</description>
    </item>
    
    <item>
      <title>Transform</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/transform/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:16 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/transform/</guid>
      <description>Namespace: Rhino.Geometry
Represents the values in a 4x4 transform matrix. This is parallel to C++ ON_Xform.
 static != Determines if two transformations are different in value. Returns - True if transforms are different; otherwise false. static * Multiplies (combines) two transformations. Returns - A transformation matrix that combines the effect of both input transformations. The resulting Transform gives the same result as though you&amp;rsquo;d first apply A then B. static * Multiplies a transformation by a point and gets a new point.</description>
    </item>
    
    <item>
      <title>AngularDimension</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/angulardimension/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/angulardimension/</guid>
      <description>Namespace: Rhino.Geometry
Represents a dimension of an entity that can be measured with an angle.
[Serializable]public class AngularDimension : DimensionConstructors  AngularDimension()  since 6.0 AngularDimension(Arc arc,double offset) Create an angular dimension from a given arc  Properties  AngleDisplayFormat AngleFormat  since 6.0 int AngleResolution  since 6.0 double AngleRoundoff  since 6.0 ZeroSuppression AngleZeroSuppression  since 6.0 Point2d ArrowPoint1  since 6.0 Point2d ArrowPoint2  since 6.</description>
    </item>
    
    <item>
      <title>Arc</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/arc/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/arc/</guid>
      <description>Namespace: Rhino.Geometry
Represents the value of a plane, two angles and a radius in a subcurve of a three-dimensional circle.
The curve is parameterized by an angle expressed in radians. For an IsValid arc the total subtended angle AngleRadians() = Domain()(1) - Domain()(0) must satisfy 0 &amp;lt; AngleRadians() &amp;lt; 2*PiThe parameterization of the Arc is inherited from the Circle it is derived from. In particulart -&amp;gt; center + cos(t)radiusxaxis + sin(t)radiusyaxiswhere xaxis and yaxis, (part of Circle.</description>
    </item>
    
    <item>
      <title>AreaMassProperties</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/areamassproperties/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/areamassproperties/</guid>
      <description>Namespace: Rhino.Geometry
Contains static initialization methods and allows access to the computed metrics of area, area centroid and area moments in closed planar curves, in meshes, in surfaces, in hatches and in boundary representations.
public class AreaMassProperties : IDisposableProperties  double Area Gets the area solution. double AreaError Gets the uncertainty in the area calculation. Point3d Centroid Gets the area centroid in the world coordinate system. Vector3d CentroidCoordinatesMomentsOfInertia Moments of inertia with respect to centroid coordinate system.</description>
    </item>
    
    <item>
      <title>Arrowhead</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/arrowhead/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/arrowhead/</guid>
      <description>Namespace: Rhino.Geometry
Arrowhead used by annotation
public class ArrowheadConstructors  Arrowhead() Constructor since 6.0 Arrowhead(ArrowType arrowType,Guid blockId) Constructor since 6.0  Properties  ArrowType ArrowType Type of arrowhead used by annotation since 6.0 Guid BlockId Id of block used for user-defined arrowhead since 6.0  </description>
    </item>
    
    <item>
      <title>BezierCurve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/beziercurve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/beziercurve/</guid>
      <description>Namespace: Rhino.Geometry
Represents a Bezier curve. Note: as an exception, the bezier curve is not derived from .
[Serializable]public class BezierCurve : IDisposable, ISerializableConstructors  BezierCurve(IEnumerablecontrolPoints) Create bezier curve with controls defined by a list of 2d points BezierCurve(IEnumerablecontrolPoints) Create bezier curve with controls defined by a list of 3d points BezierCurve(IEnumerablecontrolPoints) Create bezier curve with controls defined by a list of 4d points  Properties  int ControlVertexCount Number of control vertices in this curve int Dimension Dimension of Bezier since 6.</description>
    </item>
    
    <item>
      <title>BoundingBox</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/boundingbox/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/boundingbox/</guid>
      <description>Namespace: Rhino.Geometry
Represents the value of two points in a bounding box defined by the two extreme corner points. This box is therefore aligned to the world X, Y and Z axes.
Constructors  BoundingBox(double minX,double minY,double minZ,double maxX,double maxY,double maxZ) Constructs a boundingbox from numeric extremes. BoundingBox(IEnumerablepoints) Constructs a boundingbox from a collection of points. BoundingBox(IEnumerablepoints,Transform xform) Constructs a boundingbox from a collection of points. since 6.0 BoundingBox(Point3d min,Point3d max) Constructs a new boundingbox from two corner points.</description>
    </item>
    
    <item>
      <title>Box</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/box/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/box/</guid>
      <description>Namespace: Rhino.Geometry
Represents the value of a plane and three intervals in an orthogonal, oriented box that is not necessarily parallel to the world Y, X, Z axes.
Constructors  Box(BoundingBox bbox) Initializes a new Box that mimics a BoundingBox struct. The orientation plane of the Box is coincident with the World XY plane. Box(Plane basePlane,BoundingBox boundingbox) Initializes a world aligned box from a base plane and a boundingbox. Box(Plane basePlane,GeometryBase geometry) Initializes a box that contains a generic piece of geometry.</description>
    </item>
    
    <item>
      <title>Brep</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/brep/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/brep/</guid>
      <description>Namespace: Rhino.Geometry
Boundary Representation. A surface or polysurface along with trim curve information.
[Serializable]public class Brep : GeometryBaseConstructors  Brep() Initializes a new empty brep since 5.4  Properties  BrepCurveList Curves2D Parameter space trimming curves (used by trims) since 5.6 BrepCurveList Curves3D Pointers to 3d curves (used by edges) since 5.6 BrepEdgeList Edges Gets the brep edges list accessor. BrepFaceList Faces Gets the brep faces list accessor. bool IsManifold Gets a value indicating whether or not the Brep is manifold.</description>
    </item>
    
    <item>
      <title>BrepEdge</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/brepedge/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/brepedge/</guid>
      <description>Namespace: Rhino.Geometry
Represents a single edge curve in a Brep object.
public class BrepEdge : CurveProxyProperties  Brep Brep Gets the Brep that owns this edge. Curve EdgeCurve Get the brep.Curves3D[] 3d curve geometry used by this edge or null. since 6.0 int EdgeCurveIndex Get the brep.Curves3D[] index of the 3d curve geometry used by this edge or -1. since 6.0 int EdgeIndex Gets the index of this edge in the Brep.</description>
    </item>
    
    <item>
      <title>BrepFace</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/brepface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/brepface/</guid>
      <description>Namespace: Rhino.Geometry
Provides strongly-typed access to brep faces. A Brep face is composed of one surface and trimming curves.
public class BrepFace : SurfaceProxyProperties  Brep Brep Gets the Brep that owns this face. since 6.9 int FaceIndex Index of face in Brep.Faces array. bool IsSurface Gets a value indicating whether the face is synonymous with the underlying surface. If a Face has no trimming curves then it is considered a Surface.</description>
    </item>
    
    <item>
      <title>BrepLoop</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/breploop/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/breploop/</guid>
      <description>Namespace: Rhino.Geometry
Represent a single loop in a Brep object. A loop is composed of a list of trim curves.
public class BrepLoop : GeometryBaseProperties  Brep Brep Gets the Brep that owns this loop. BrepFace Face BrepFace this loop belongs to. int LoopIndex Gets the index of this loop in the Brep.Loops collection. BrepLoopType LoopType type of loop. BrepTrimList Trims List of trims for this loop since 5.1  Methods  Curve To2dCurve() Create a 2d curve that traces the entire loop since 5.</description>
    </item>
    
    <item>
      <title>BrepRegion</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/brepregion/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/brepregion/</guid>
      <description>Namespace: Rhino.Geometry
Represents a brep topological region that has sides.
public class BrepRegion : Runtime.CommonObjectProperties  BoundingBox BoundingBox Gets the region bounding box. Brep Brep Gets a reference to the Brep this region belongs to. int Index Gets the index of region in the RegionTopology array. bool IsFinite Gets a value indicating whether this region is finite.  Methods  Brep BoundaryBrep() Gets the boundary of a region as a brep object.</description>
    </item>
    
    <item>
      <title>BrepRegionFaceSide</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/brepregionfaceside/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/brepregionfaceside/</guid>
      <description>Namespace: Rhino.Geometry
Represents a side of a entity.
public class BrepRegionFaceSide : Runtime.CommonObjectProperties  Brep Brep The brep this side belongs to. BrepFace Face Gets the face this side belongs to. BrepRegion Region The region this side belongs to. bool SurfaceNormalPointsIntoRegion Gets True if BrepFace&amp;rsquo;s surface normal points into region; False otherwise.  </description>
    </item>
    
    <item>
      <title>BrepTrim</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/breptrim/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/breptrim/</guid>
      <description>Namespace: Rhino.Geometry
Brep trim information is stored in BrepTrim classes. Brep.Trims is an array of all the trims in the brep. A BrepTrim is derived from CurveProxy so the trim can supply easy to use evaluation tools via the Curve virtual member functions. Note well that the domains and orientations of the curve m_C2[trim.m_c2i] and the trim as a curve may not agree.
public class BrepTrim : CurveProxyProperties  Brep Brep Gets the Brep that owns this trim.</description>
    </item>
    
    <item>
      <title>BrepVertex</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/brepvertex/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/brepvertex/</guid>
      <description>Namespace: Rhino.Geometry
Brep vertex information
public class BrepVertex : PointProperties  Brep Brep Gets the Brep that owns this vertex. since 5.4 int VertexIndex Gets the index of this vertex in the Brep.Vertices collection. since 5.4  Methods  int[] EdgeIndices() Gets the indices of all edges associated with this vertex. Returns - Empty array on failure. since 5.12  </description>
    </item>
    
    <item>
      <title>Centermark</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/centermark/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/centermark/</guid>
      <description>Namespace: Rhino.Geometry
Represents a centermark
[Serializable]public class Centermark : DimensionConstructors  Centermark()  since 6.0  Methods  static Centermark Create(DimensionStyle dimStyle,Plane plane,Point3d centerpoint,double radius) Create a new centermark since 6.0  </description>
    </item>
    
    <item>
      <title>Circle</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/circle/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/circle/</guid>
      <description>Namespace: Rhino.Geometry
Represents a circle in 3D. The values used are a radius and an orthonormal frame of the plane containing the circle, with origin at the center.The circle is parameterized by radians from 0 to 2 Pi given byt -&amp;gt; center + cos(t)radiusxaxis + sin(t)radiusyaxiswhere center, xaxis and yaxis define the orthonormal frame of the circle plane.
Constructors  Circle(Arc arc) Initializes a circle from an arc. Circle(double radius) Initializes a circle with center (0,0,0) in the world XY plane.</description>
    </item>
    
    <item>
      <title>ClippingPlaneSurface</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/clippingplanesurface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/clippingplanesurface/</guid>
      <description>Namespace: Rhino.Geometry
Represents a planar surface that is used as clipping plane in viewports. A clipping plane object maintains a list of viewports that it clips against.
[Serializable]public class ClippingPlaneSurface : PlaneSurfaceProperties  Plane Plane Gets or sets the clipping plane.  Methods  bool AddClipViewportId(Guid viewportId) Adds a viewport id to the list of viewports that this clipping plane clips. Returns - True if the viewport was added, False if the viewport is already in the list.</description>
    </item>
    
    <item>
      <title>ComponentIndex</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/componentindex/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/componentindex/</guid>
      <description>Namespace: Rhino.Geometry
Represents an index of an element contained in another object.
Constructors  ComponentIndex(ComponentIndexType type,int index) Construct component index with a specific type/index combination  Properties  static ComponentIndex Unset The unset value of component index. ComponentIndexType ComponentIndexType The interpretation of Index depends on the Type value. Type m_index interpretation (0 based indices) no_type used when context makes it clear what array is being index brep_vertex Brep.m_V[] array index brep_edge Brep.</description>
    </item>
    
    <item>
      <title>ComponentStatus</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/componentstatus/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/componentstatus/</guid>
      <description>Namespace: Rhino.Geometry
Provides information about selection, highlighting, visibility, editability and integrity states of a component. This structure is immutable.
 static != Determines if two ComponentStatus objects differ. Returns - True if they are in any way different. False otherwise. since 6.0 static + Sets flags from both component states and returns a new ComponentStatus. Returns - A new ComponentStatus. since (unknown) static == Determines if two ComponentStatus objects are equal.</description>
    </item>
    
    <item>
      <title>Cone</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/cone/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/cone/</guid>
      <description>Namespace: Rhino.Geometry
Represents the center plane, radius and height values in a right circular cone.
Constructors  Cone(Plane plane,double height,double radius) Initializes a new cone with a specified base plane, height and radius.  Properties  static Cone Unset Gets an invalid Cone. Point3d ApexPoint Point at tip of the cone. Vector3d Axis Unit vector axis of cone. Point3d BasePoint Center of base circle. double Height Gets or sets the height of the circular right cone.</description>
    </item>
    
    <item>
      <title>Curve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/curve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/curve/</guid>
      <description>Namespace: Rhino.Geometry
Represents a base class that is common to most RhinoCommon curve types. A curve represents an entity that can be all visited by providing a single parameter, usually called t.
[Serializable]public class Curve : GeometryBaseProperties  int Degree Gets the maximum algebraic degree of any span or a good estimate if curve spans are not algebraic. int Dimension Gets the dimension of the object. The dimension is typically three.</description>
    </item>
    
    <item>
      <title>CurveBooleanRegions</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/curvebooleanregions/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/curvebooleanregions/</guid>
      <description>Namespace: Rhino.Geometry
Represents the results of a Curve.CreateBooleanRegions calculation.
[Serializable]public class CurveBooleanRegions : IDisposableProperties  int PlanarCurveCount Returns number of planar curves that were calculated by Curve.CreateBooleanRegions. since 7.0 int PointCount If this object were created using the Curve.CreateBooleanRegions override that accepts a collection of points as input, then this value will be equal to the length of the points collection. since 7.0 int RegionCount Returns the number of curve regions.</description>
    </item>
    
    <item>
      <title>CurveProxy</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/curveproxy/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/curveproxy/</guid>
      <description>Namespace: Rhino.Geometry
Provides strongly-typed access to Brep edges.
public class CurveProxy : CurveProperties  bool ProxyCurveIsReversed True if &amp;ldquo;this&amp;rdquo; is a curve is reversed from the &amp;ldquo;real&amp;rdquo; curve geometry since 5.10  </description>
    </item>
    
    <item>
      <title>Cylinder</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/cylinder/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/cylinder/</guid>
      <description>Namespace: Rhino.Geometry
Represents the values of a plane, a radius and two heights -on top and beneath- that define a right circular cylinder.
Constructors  Cylinder(Circle baseCircle) Constructs a new cylinder with infinite height. Cylinder(Circle baseCircle,double height) Constructs a new cylinder with a finite height.  Properties  static Cylinder Unset Gets an invalid Cylinder. Vector3d Axis Gets the axis direction of the cylinder. Plane BasePlane Gets or sets the base plane of the cylinder.</description>
    </item>
    
    <item>
      <title>DetailView</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/detailview/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/detailview/</guid>
      <description>Namespace: Rhino.Geometry
Represents a view of the model placed on a page layout.
[Serializable]public class DetailView : GeometryBaseProperties  bool IsParallelProjection Gets or sets whether the view is parallel. bool IsPerspectiveProjection Gets or sets whether the view is perspective. bool IsProjectionLocked Gets or sets whether the view projection is locked. double PageToModelRatio Gets the page units/model units quotient.  Methods  bool SetScale(double modelLength,UnitSystem modelUnits,double pageLength,UnitSystem pageUnits) Sets the detail viewport&amp;rsquo;s projection so geometry is displayed at a certain scale.</description>
    </item>
    
    <item>
      <title>Dimension</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/dimension/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/dimension/</guid>
      <description>Namespace: Rhino.Geometry
Base class for dimensions
[Serializable]public class Dimension : AnnotationBaseProperties  bool AlternateBelowLine  since 6.0 double AltLengthFactor  since 6.0 int AltLengthResolution  since 6.0 double AltLengthRoundoff  since 6.0 string AltPrefix  since 6.0 string AltSuffix  since 6.0 int AltToleranceResolution  since 6.0 bool AltUnitsDisplay  since 6.0 ZeroSuppression AltZeroSuppression  since 6.0 Guid ArrowBlockId1  since 6.0 Guid ArrowBlockId2  since 6.0 ArrowFit ArrowFit  since 6.</description>
    </item>
    
    <item>
      <title>Ellipse</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/ellipse/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/ellipse/</guid>
      <description>Namespace: Rhino.Geometry
Represents the values of a plane and the two semiaxes radii in an ellipse.
Constructors  Ellipse(Plane plane,double radius1,double radius2) Initializes a new ellipse from base plane and both principal radii. Ellipse(Point3d center,Point3d second,Point3d third) Initializes a new ellipse from a center point and the two semiaxes intersections.  Properties  bool IsValid Returns an indication of the validity of this ellipse. since 6.0 Plane Plane Gets or sets the base plane of the ellipse.</description>
    </item>
    
    <item>
      <title>Extrusion</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/extrusion/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/extrusion/</guid>
      <description>Namespace: Rhino.Geometry
Represents an extrusion, or objects such as beams or linearly extruded elements, that can be represented by profile curves and two miter planes at the extremes.
[Serializable]public class Extrusion : SurfaceConstructors  Extrusion() Initializes a new instance of the class.  Properties  int CapCount Gets the amount of capping surfaces. bool IsCappedAtBottom Gets a value indicating whether the surface that fills the bottom profile is existing.</description>
    </item>
    
    <item>
      <title>GeometryBase</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/geometrybase/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/geometrybase/</guid>
      <description>Namespace: Rhino.Geometry
Provides a common base for most geometric classes. This class is abstract.
[Serializable]public class GeometryBase : Runtime.CommonObjectProperties  bool HasBrepForm Returns True if the Brep.TryConvertBrep function will be successful for this object since 5.6 bool IsDeformable True if object can be accurately modified with &amp;ldquo;squishy&amp;rdquo; transformations like projections, shears, and non-uniform scaling. bool IsDocumentControlled If True this object may not be modified. Any properties or functions that attempt to modify this object when it is set to &amp;ldquo;IsReadOnly&amp;rdquo; will throw a NotSupportedException.</description>
    </item>
    
    <item>
      <title>Hatch</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hatch/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hatch/</guid>
      <description>Namespace: Rhino.Geometry
Represents a hatch in planar boundary loop or loops. This is a 2d entity with a plane defining a local coordinate system. The loops, patterns, angles, etc are all in this local coordinate system. The Hatch object manages the plane and loop array Fill definitions are in the HatchPattern or class derived from HatchPattern Hatch has an index to get the pattern definition from the pattern table.
[Serializable]public class Hatch : GeometryBaseProperties  Point3d BasePoint Gets or sets the hatchpattern basepoint since 6.</description>
    </item>
    
    <item>
      <title>HermiteSurface</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hermitesurface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hermitesurface/</guid>
      <description>Namespace: Rhino.Geometry
Create an ON_NurbsSurface satisfying Hermite interpolation conditions at a grid of points.
public class HermiteSurface : IDisposableConstructors  HermiteSurface() Initializes a new instance. since 7.0 HermiteSurface(int uCount,int vCount) Initializes a new instance. since 7.0  Properties  bool IsValid Returns True if the all of values in all of the internal data structues contain valid values, False otherwise. since 7.0 int UCount Gets the number of parameters in the &amp;ldquo;u&amp;rdquo; direction.</description>
    </item>
    
    <item>
      <title>HiddenLineDrawing</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawing/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawing/</guid>
      <description>Namespace: Rhino.Geometry
Represents a hidden line drawing object. A hidden line drawing consists of curves generated from source objects. The curves correspond to edges, and silhouettes of source objects and intersections with cutting planes.
public class HiddenLineDrawing : IDisposableProperties  IEnumerablePoints Point objects calculated by the hidden line drawing. since 6.8 IEnumerableSegments Subcurve objects calculated by the hidden line drawing. since 6.0 ViewportInfo Viewport Returns the ViewportInfo used by the hidden line drawing.</description>
    </item>
    
    <item>
      <title>HiddenLineDrawingObject</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingobject/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingobject/</guid>
      <description>Namespace: Rhino.Geometry
Represents an object added to a HiddenLineDrawing
public class HiddenLineDrawingObjectProperties  GeometryBase Geometry Returns the geometry in world coordinates if UseXform is false. Otherwise, the geometry in object space coordinates is returned. since 6.0 object Tag Returns the extra data used to cross-reference the object specified in HiddenLineDrawing.AddObject. since 6.0 Transform Transform Returns the transformation passed into the Add&amp;hellip; function when setting up the hidden line drawing parameters.</description>
    </item>
    
    <item>
      <title>HiddenLineDrawingObjectCurve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingobjectcurve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingobjectcurve/</guid>
      <description>Namespace: Rhino.Geometry
Curves generated from source objects which correspond to edges, and silhouettes of source objects and intersections with cutting planes. A HiddenLineDrawingObjectCurve is partitioned into hidden and visible segments called HiddenLineDrawingSegment
public class HiddenLineDrawingObjectCurveProperties  int ClippingPlaneIndex Index into HiddenLineDrawing.ClippingPlanes when SilhouetteType == SilhouetteType.SectionCut. since 6.0 int Index Index of this object in HiddenLineDrawing.FullCurves. since 6.0 bool IsProjecting Returns True if all the non clipped portions of this curve are projecting.</description>
    </item>
    
    <item>
      <title>HiddenLineDrawingParameters</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingparameters/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingparameters/</guid>
      <description>Namespace: Rhino.Geometry
Input used for computing a hidden line drawing
public class HiddenLineDrawingParametersConstructors  HiddenLineDrawingParameters() default constructor since 6.0  Properties  double AbsoluteTolerance Absolute tolerance is used to decide if curves overlap or intersect. A suggested value is to use RhinoDoc.AbsoluteTolerance since 6.0 bool Flatten Flatten the computed geometry since 6.0 bool IncludeHiddenCurves Include hidden curves in hidden line drawing (default is true) since 6.0 bool IncludeTangentEdges Include tangent edges in hidden line drawing (default is true) since 6.</description>
    </item>
    
    <item>
      <title>HiddenLineDrawingPoint</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingpoint/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingpoint/</guid>
      <description>Namespace: Rhino.Geometry
Points generated from source objects which coorespond to point and point cloud source objects.
public class HiddenLineDrawingPointProperties  int ClippingPlaneIndex Index into HiddenLineDrawing.ClippingPlanes when SilhouetteType == SilhouetteType.SectionCut. since 6.8 int Index Index of this object in HiddenLineDrawing.Points. since 6.8 Point3d Location Returns the location of this object in HiddenLineDrawing coordinates. since 6.8 Visibility PointVisibility Returns the point&amp;rsquo;s visibility since 6.8 HiddenLineDrawingObject SourceObject Return the source object that this point came from.</description>
    </item>
    
    <item>
      <title>HiddenLineDrawingSegment</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingsegment/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/hiddenlinedrawingsegment/</guid>
      <description>Namespace: Rhino.Geometry
The results of HiddenLineDrawing calculation are a collection of segments. A segment is a subcurve of a HiddenLineDrawingObjectCurve.
public class HiddenLineDrawingSegmentProperties  Curve CurveGeometry The actual curve geometry since 6.0 SideFill[] CurveSideFills The SideFill fields are only valid for visible curves. With respect to the HiddenLineDrawing, the region to the left (or right respecively) of this curve is described by CurveSideFills[0] or CurveSideFills[1], respectively. If exactly one of these regions is empty this is a scene silhouette.</description>
    </item>
    
    <item>
      <title>InstanceDefinitionGeometry</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/instancedefinitiongeometry/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/instancedefinitiongeometry/</guid>
      <description>Namespace: Rhino.Geometry
Represents a block definition in a File3dm. This is the same as Rhino.DocObjects.InstanceDefinition, but not associated with a RhinoDoc.
public class InstanceDefinitionGeometry : ModelComponentConstructors  InstanceDefinitionGeometry() Initializes a new block definition.  Properties  ModelComponentType ComponentType Returns . since 6.0 string Description Gets or sets the description of the definition.  Methods  Guid[] GetObjectIds() list of object ids in the instance geometry table since 5.6  </description>
    </item>
    
    <item>
      <title>InstanceReferenceGeometry</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/instancereferencegeometry/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/instancereferencegeometry/</guid>
      <description>Namespace: Rhino.Geometry
Represents a reference to the geometry in a block definition.
public class InstanceReferenceGeometry : GeometryBaseConstructors  InstanceReferenceGeometry(Guid instanceDefinitionId,Transform transform) Constructor used when creating nested instance references. since 5.1  Properties  Guid ParentIdefId The unique id for the parent instance definition of this instance reference. since 5.6 Transform Xform Transformation for this reference. since 5.6  </description>
    </item>
    
    <item>
      <title>InvalidDimensionStyleIdException</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/invaliddimensionstyleidexception/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/invaliddimensionstyleidexception/</guid>
      <description>Namespace: Rhino.Geometry
General exception that can be thrown by annotations
public class InvalidDimensionStyleIdException : InvalidOperationExceptionConstructors  InvalidDimensionStyleIdException(string msg)  since 6.0  </description>
    </item>
    
    <item>
      <title>Leader</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/leader/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/leader/</guid>
      <description>Namespace: Rhino.Geometry
Leader geometry class
[Serializable]public class Leader : AnnotationBaseConstructors  Leader() Constructor since 6.0  Properties  NurbsCurve Curve Gets the curve used by this leader since 6.0 Guid LeaderArrowBlockId Id of the block used as the arrow for the leader when the arrow type is &amp;lsquo;User arrow&amp;rsquo; since 6.0 double LeaderArrowSize The size of the leader arrow since 6.0 ArrowType LeaderArrowType The arrowhead type for the leader since 6.</description>
    </item>
    
    <item>
      <title>Light</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/light/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/light/</guid>
      <description>Namespace: Rhino.Geometry
Represents a light that shines in the modeling space.
[Serializable]public class Light : GeometryBaseConstructors  Light() Initializes a new light.  Properties  Color Ambient Gets or sets the ambient color. Attenuation AttenuationType Get the type of attenuation for this light. since 7.0 Vector3d AttenuationVector Gets or Sets the attenuation vector. since 5.7 CoordinateSystem CoordinateSystem Gets a value, determined by LightStyle, that explains whether the camera directions are relative to World or Camera spaces.</description>
    </item>
    
    <item>
      <title>Line</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/line/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/line/</guid>
      <description>Namespace: Rhino.Geometry
Represents the value of start and end points in a single line segment.
 static != Determines whether two lines have different values. Returns - True if a has any coordinate that distinguishes it from b; otherwise false. static == Determines whether two lines have the same value. Returns - True if a has the same coordinates as b; otherwise false.  Constructors  Line(double x0,double y0,double z0,double x1,double y1,double z1) Constructs a new line segment between two points.</description>
    </item>
    
    <item>
      <title>LinearDimension</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/lineardimension/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/lineardimension/</guid>
      <description>Namespace: Rhino.Geometry
Represents a linear dimension
[Serializable]public class LinearDimension : DimensionConstructors  LinearDimension()  LinearDimension(Plane dimensionPlane,Point2d extensionLine1End,Point2d extensionLine2End,Point2d pointOnDimensionLine)   Properties  bool Aligned Gets or sets a value indicating whether this annotation is aligned. AnnotationType AnnotationType  since 6.0 Point2d Arrowhead1End Gets the arrow head end of the first extension line. Point2d Arrowhead2End Gets the arrow head end of the second extension line. Point2d DimensionLinePoint Point on annotation plane where dimension line starts since 6.</description>
    </item>
    
    <item>
      <title>LineCurve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/linecurve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/linecurve/</guid>
      <description>Namespace: Rhino.Geometry
Represents a linear curve.
[Serializable]public class LineCurve : CurveConstructors  LineCurve() Initializes a new instance of the class. LineCurve(Line line) Initializes a new instance of the class, by retrieving its value from a line. LineCurve(Line line,double t0,double t1) Initializes a new instance of the class, by retrieving its value from a line and setting the domain. LineCurve(LineCurve other) Initializes a new instance of the class, by copying values from another linear curve.</description>
    </item>
    
    <item>
      <title>Matrix</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/matrix/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/matrix/</guid>
      <description>Namespace: Rhino.Geometry
Represents an arbitrarily sized matrix of double-precision floating point numbers. If you are working with a 4x4 matrix, then you may want to use the class instead.
public class Matrix : IDisposable static * Multiplies two matrices and returns a new product matrix. Returns - The product matrix. static + Adds two matrices and returns a new sum matrix. Returns - The sum matrix. since (unknown)  Constructors  Matrix(int rowCount,int columnCount) Initializes a new instance of the matrix.</description>
    </item>
    
    <item>
      <title>Mesh</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/mesh/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/mesh/</guid>
      <description>Namespace: Rhino.Geometry
Represents a geometry type that is defined by vertices and faces. This is often called a face-vertex mesh.
[Serializable]public class Mesh : GeometryBaseConstructors  Mesh() Initializes a new empty mesh.  Properties  MeshVertexStatusList ComponentStates Gets access to the vertex hidden/visibility collection in this mesh. This is a runtime property and it is not saved in the 3dm file. since 6.0 int DisjointMeshCount Gets the number of disjoint (topologically unconnected) pieces in this mesh.</description>
    </item>
    
    <item>
      <title>MeshCheckParameters</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshcheckparameters/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshcheckparameters/</guid>
      <description>Namespace: Rhino.Geometry
Output of a mesh checking operations.
Properties  bool CheckForBadNormals If true, then then look for vertex normals that are not unit vectors, are zero length or vary greatly from the general direction of the face normals. since 7.0 bool CheckForDegenerateFaces If true, then look for triangles and quads that have zero area and quads where one sub triangle has zero area. since 7.0 bool CheckForDisjointMeshes If true, then look for faces in the mesh that are totally isolated from other faces in the mesh.</description>
    </item>
    
    <item>
      <title>MeshDisplacementInfo</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshdisplacementinfo/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshdisplacementinfo/</guid>
      <description>Namespace: Rhino.Geometry
Contains mesh displacement information.
public class MeshDisplacementInfoConstructors  MeshDisplacementInfo(RenderTexture texture,TextureMapping mapping) Constructs a displacement information instance with default values. Users of this class should not rely on default values to stay constant across service releases. since 6.0  Properties  double Black Value considered lowest point in the displacement. since 6.0 double BlackMove The amount of displacement for the black color in the texture. since 6.0 int ChannelNumber Mapping channel number for the displacement mapping.</description>
    </item>
    
    <item>
      <title>MeshFace</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshface/</guid>
      <description>Namespace: Rhino.Geometry
Represents the values of the four indices of a mesh face quad. If the third and fourth values are the same, this face represents a triangle.
 static != Determines whether two structures have different values. Returns - True if the indices of the two points are in any way different; otherwise false. since 6.0 static == Determines whether two structures have equal values. Returns - True if the indices of the two points are exactly equal; otherwise false.</description>
    </item>
    
    <item>
      <title>MeshingParameters</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshingparameters/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshingparameters/</guid>
      <description>Namespace: Rhino.Geometry
Represents settings used for creating a mesh representation of a brep or surface.
public class MeshingParameters : IDisposableConstructors  MeshingParameters() Initializes a new instance with default values. Initial values are same as . MeshingParameters(double density) Initializes a new instance with simple values, similar to that of Rhino&amp;rsquo;s meshing slider interface. since 6.0 MeshingParameters(double density,double minimumEdgeLength) Initializes a new instance with simple values, similar to that of Rhino&amp;rsquo;s meshing slider interface.</description>
    </item>
    
    <item>
      <title>MeshNgon</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshngon/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshngon/</guid>
      <description>Namespace: Rhino.Geometry
Represents a mesh ngon. When retrieved from the Ngon property of a mesh, this contains faces that have edge valence strictly higher than 4.When retrieving Ngons from , this might contain also triangles and quads.
public class MeshNgon : IEquatable&amp;lt;MeshNgon&amp;gt;, IComparable&amp;lt;MeshNgon&amp;gt;, IComparable static != Determines whether two structures have different values. Returns - True if the vertex or face index lists are different in any way; otherwise false.</description>
    </item>
    
    <item>
      <title>MeshPart</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshpart/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshpart/</guid>
      <description>Namespace: Rhino.Geometry
Represents a portion of a mesh for partitioning
public class MeshPartProperties  int EndFaceIndex End of subinterval of parent mesh face array since 5.6 int EndVertexIndex End of subinterval of parent mesh vertex array since 5.6 int StartFaceIndex Start of subinterval of parent mesh face array since 5.6 int StartVertexIndex Start of subinterval of parent mesh vertex array since 5.6 int TriangleCount  since 5.6 int VertexCount EndVertexIndex - StartVertexIndex since 5.</description>
    </item>
    
    <item>
      <title>MeshPoint</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshpoint/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshpoint/</guid>
      <description>Namespace: Rhino.Geometry
Represents a point that is found on a mesh.
public class MeshPointProperties  ComponentIndex ComponentIndex Gets the component index of the intersecting element in the mesh. int EdgeIndex When set, EdgeIndex is an index of an edge in the mesh&amp;rsquo;s edge list. double EdgeParameter Edge parameter when found. int FaceIndex FaceIndex is an index of a face in mesh.Faces. When ComponentIndex refers to a vertex, any face that uses the vertex may appear as FaceIndex.</description>
    </item>
    
    <item>
      <title>MeshThicknessMeasurement</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshthicknessmeasurement/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshthicknessmeasurement/</guid>
      <description>Namespace: Rhino.Geometry
Thickness measurement used in the mesh thickness solver.
Constructors  MeshThicknessMeasurement(int meshIndex,int vertexIndex,double thickness,Point3d point,Point3d oppositePoint) Create a new thickness measurement. since 6.0  Properties  int MeshIndex Gets the index of the mesh associated with this thickness measurement. since 6.0 Point3d OppositePoint Gets the point opposite to the measurement point. since 6.0 Point3d Point Gets the location of the thickness measurement. since 6.0 double Thickness Gets the local thickness of the mesh.</description>
    </item>
    
    <item>
      <title>MeshUnsafeLock</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/meshunsafelock/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/meshunsafelock/</guid>
      <description>Namespace: Rhino.Geometry
Permits access to the underlying mesh raw data structures in an unsafe way.
public class MeshUnsafeLock : IDisposableMethods  MeshFace* FacesArray(int length) Retrieves a pointer to the raw faces array, which uses 4 integers for each face. . Returns - The beginning of the vertex array. Item 0 is the first vertex, and item length-1 is the last valid one. since 6.20 Vector3f* NormalVector3fArray(int length) Retrieves a pointer to the raw mesh vertex normal array, which uses vectors defined with single precision floating point numbers, or throws an exception if none is available.</description>
    </item>
    
    <item>
      <title>MorphControl</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/morphcontrol/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/morphcontrol/</guid>
      <description>Namespace: Rhino.Geometry
Represents a geometry that is able to control the morphing behaviour of some other geometry.
[Serializable]public class MorphControl : GeometryBaseConstructors  MorphControl(NurbsCurve originCurve,NurbsCurve targetCurve) Constructs a MorphControl that allows for morphing between two curves.  Properties  NurbsCurve Curve Returns the morph control&amp;rsquo;s curve. While this should never be null, the calling function should check. since 6.0 bool PreserveStructure True if the morph should be done in a way that preserves the structure of the geometry.</description>
    </item>
    
    <item>
      <title>OrdinateDimension</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/ordinatedimension/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/ordinatedimension/</guid>
      <description>Namespace: Rhino.Geometry
Represents an ordinate dimension
[Serializable]public class OrdinateDimension : DimensionConstructors  OrdinateDimension()  since 6.0  Properties  Point2d DefPoint  since 6.0 double KinkOffset1  since 6.0 double KinkOffset2  since 6.0 Point2d KinkPoint1  since 6.0 Point2d KinkPoint2  since 6.0 Point2d LeaderPoint  since 6.0  Methods  static OrdinateDimension Create(DimensionStyle dimStyle,Plane plane,MeasuredDirection direction,Point3d basepoint,Point3d defpoint,Point3d leaderpoint,double kinkoffset1,double kinkoffset2) Initialize Dimension parameters since 6.0 bool AdjustFromPoints(Plane plane,MeasuredDirection direction,Point3d basepoint,Point3d defpoint,Point3d leaderpoint,double kinkoffset1,double kinkoffset2) Update Dimension geometry from point locations since 6.</description>
    </item>
    
    <item>
      <title>Plane</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/plane/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/plane/</guid>
      <description>Namespace: Rhino.Geometry
Represents the value of a center point and two axes in a plane in three dimensions.
 static != Determines if two planes are different. Returns - True if the two planes have any different componet components; False otherwise. static == Determines if two planes are equal. Returns - True if the two planes have all equal components; False otherwise.  Constructors  Plane(double a,double b,double c,double d) Constructs a plane from an equation Ax+By+Cz+D=0.</description>
    </item>
    
    <item>
      <title>PlaneSurface</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/planesurface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/planesurface/</guid>
      <description>Namespace: Rhino.Geometry
Represents a plane surface, with plane and two intervals.
[Serializable]public class PlaneSurface : SurfaceConstructors  PlaneSurface(Plane plane,Interval xExtents,Interval yExtents) Initializes a plane surface with x and y intervals.  Methods  static PlaneSurface CreateThroughBox(Line lineInPlane,Vector3d vectorInPlane,BoundingBox box) Makes a plane that includes a line and a vector and goes through a bounding box. Returns - A new plane surface on success, or None on error. static PlaneSurface CreateThroughBox(Plane plane,BoundingBox box) Extends a plane into a plane surface so that the latter goes through a bounding box.</description>
    </item>
    
    <item>
      <title>Point</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/point/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/point/</guid>
      <description>Namespace: Rhino.Geometry
Represents a geometric point. This is fundamentally a class that derives from and contains a single location.
[Serializable]public class Point : GeometryBaseConstructors  Point(Point3d location) Initializes a new point instance with a location.  Properties  Point3d Location Gets or sets the location (position) of this point.  </description>
    </item>
    
    <item>
      <title>Point2f</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/point2f/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/point2f/</guid>
      <description>Namespace: Rhino.Geometry
Represents the two coordinates of a point in two-dimensional space, using -precision floating point numbers.
 static - Subtracts two s. Returns - A subtracted Vector2f. since 6.0 static != Determines whether two have different values. Returns - True if the two points differ in any coordinate; False otherwise. static * Multiplies a by a scalar. Returns - A multiplied Point2f. since 6.0 static / Divides a by a scalar.</description>
    </item>
    
    <item>
      <title>Point3dGrid</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/point3dgrid/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/point3dgrid/</guid>
      <description>Namespace: Rhino.Geometry
Represents a rectangular grid of 3D points.
[Serializable]public class Point3dGrid : GeometryBaseConstructors  Point3dGrid() Initializes a rectangular grid of points, with no points in it. Point3dGrid(int rows,int columns) Initializes a rectangular grid of points with a given number of columns and rows.  </description>
    </item>
    
    <item>
      <title>Point3f</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/point3f/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/point3f/</guid>
      <description>Namespace: Rhino.Geometry
Represents the three coordinates of a point in three-dimensional space, using -precision floating point numbers.
 static - Subtracts a point from another point. Returns - A new vector that is the difference of point minus vector. static != Determines whether two points have different values. Returns - True if the two points differ in any coordinate; False otherwise. static * Multiplies a point by a factor. Returns - A new vector that is the multiplication of point by value.</description>
    </item>
    
    <item>
      <title>Point4d</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/point4d/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/point4d/</guid>
      <description>Namespace: Rhino.Geometry
Represents the four coordinates of a point in four-dimensional space. The W (fourth) dimension is often considered the weight of the point as seen in 3D space.
 static - Subtracts the second point from the first point. Returns - A new point that results from the weighted subtraction of point2 from point1. static != Determines whether two Point4d have different values. Returns - True if the two points differ in any coordinate; False otherwise.</description>
    </item>
    
    <item>
      <title>PointCloud</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/pointcloud/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/pointcloud/</guid>
      <description>Namespace: Rhino.Geometry
Represents a collection of coordinates with optional normal vectors and colors.
[Serializable]public class PointCloud : GeometryBase, IEnumerable&amp;lt;PointCloudItem&amp;gt;Constructors  PointCloud() Initializes a new instance of the class that is empty. PointCloud(IEnumerablepoints) Initializes a new instance of the class, copying the content from a set of points. PointCloud(PointCloud other) Initializes a new instance of the class, copying (Merge) the content of another pointcloud.  Properties  bool ContainsColors Gets a value indicating whether or not the points in this pointcloud have colors assigned to them.</description>
    </item>
    
    <item>
      <title>PointCloudItem</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/pointclouditem/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/pointclouditem/</guid>
      <description>Namespace: Rhino.Geometry
Represents a single item in a pointcloud. A PointCloud item always has a location, but it has an optional normal vector and color.
public class PointCloudItemProperties  Color Color Gets or sets the color of this point cloud item. bool Hidden Gets or sets the hidden flag of this point cloud item. int Index Gets the index of this point cloud item. Point3d Location Gets or sets the location of this point cloud item.</description>
    </item>
    
    <item>
      <title>PolyCurve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/polycurve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/polycurve/</guid>
      <description>Namespace: Rhino.Geometry
Represents a curve that is the result of joining several (possibly different) types of curves.
[Serializable]public class PolyCurve : CurveConstructors  PolyCurve() Initializes a new, empty polycurve.  Properties  bool HasGap This is a quick way to see if the curve has gaps between the sub curve segments. bool IsNested Gets a value indicating whether or not a PolyCurve contains nested PolyCurves. int SegmentCount Gets the number of segments that make up this Polycurve.</description>
    </item>
    
    <item>
      <title>Polyline</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/polyline/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/polyline/</guid>
      <description>Namespace: Rhino.Geometry
Represents an ordered set of points connected by linear segments. Polylines are closed if start and end points coincide.
[Serializable]public class Polyline : Rhino.Collections.Point3dList, ICloneableConstructors  Polyline() Initializes a new empty polyline. Polyline(IEnumerablecollection) Initializes a new polyline from a collection of points. Polyline(int initialCapacity) Initializes a new empty polyline with an initial capacity.  Properties  bool IsClosed Gets a value that indicates whether this polyline is closed.</description>
    </item>
    
    <item>
      <title>PolylineCurve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/polylinecurve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/polylinecurve/</guid>
      <description>Namespace: Rhino.Geometry
Represents the geometry of a set of linked line segments. This is fundamentally a class that derives from and internally contains a .
[Serializable]public class PolylineCurve : CurveConstructors  PolylineCurve() Initializes a new empty polyline curve. PolylineCurve(IEnumerablepoints) Initializes a new polyline curve by copying its content from another set of points. PolylineCurve(PolylineCurve other) Initializes a new polyline curve by copying its content from another polyline curve.  Properties  int PointCount Gets the number of points in this polyline.</description>
    </item>
    
    <item>
      <title>QuadRemeshParameters</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/quadremeshparameters/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/quadremeshparameters/</guid>
      <description>Namespace: Rhino.Geometry
Parameters for QuadRemesh method
public class QuadRemeshParametersProperties  bool AdaptiveQuadCount Respect the original Target Quad Count value as much as possible. True returns more quads than TargetQuadCount depending on amount of high-curvature areas. since 7.0 double AdaptiveSize Larger values results in for quad sizes that adjust to match input curvature. Smaller values results in more uniform quad sizes at the risk of less feature preservation. Range [0 - 100] since 7.</description>
    </item>
    
    <item>
      <title>Quaternion</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/quaternion/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/quaternion/</guid>
      <description>Namespace: Rhino.Geometry
Represents the four coefficient values in a quaternion. The first value a is the real part, while the rest multipies i, j and k, that are imaginary.quaternion = a + bi + cj + dk
 static - Subtracts a quaternion from another one. This computes the difference of each quaternion coefficient with its correspondant and returns a new result quaternion. Returns - A new quaternion. static != Determines whether two quaternions have different values.</description>
    </item>
    
    <item>
      <title>RadialDimension</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/radialdimension/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/radialdimension/</guid>
      <description>Namespace: Rhino.Geometry
Represents a dimension of a circular entity that can be measured with radius or diameter.
[Serializable]public class RadialDimension : DimensionConstructors  RadialDimension()  since 6.0  Properties  AnnotationType AnnotationType  since 6.0 Point2d CenterPoint  since 6.0 Point2d DimlinePoint  since 6.0 bool IsDiameterDimension Gets a value indicating whether the value refers to the diameter, rather than the radius. Point2d KneePoint  since 6.0 Guid LeaderArrowBlockId  since 6.</description>
    </item>
    
    <item>
      <title>Ray3d</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/ray3d/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/ray3d/</guid>
      <description>Namespace: Rhino.Geometry
Represents an immutable ray in three dimensions, using position and direction.
 static != Determines whether two have different values. Returns - True if position or direction (or both) in the two rays are different; otherwise false. static == Determines whether two have equal values. Returns - True if position and direction of the two rays are equal; otherwise false.  Constructors  Ray3d(Point3d position,Vector3d direction) Initializes a new Ray3d instance.</description>
    </item>
    
    <item>
      <title>Rectangle3d</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/rectangle3d/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/rectangle3d/</guid>
      <description>Namespace: Rhino.Geometry
Represents the values of a plane and two intervals that form an oriented rectangle in three dimensions.
Constructors  Rectangle3d(Plane plane,double width,double height) Initializes a new rectangle from width and height. Rectangle3d(Plane plane,Interval width,Interval height) Initializes a new rectangle from dimensions. Rectangle3d(Plane plane,Point3d cornerA,Point3d cornerB) Initializes a new rectangle from a base plane and two corner points.  Properties  static Rectangle3d Unset Gets a rectangle with Unset components.</description>
    </item>
    
    <item>
      <title>ReduceMeshParameters</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/reducemeshparameters/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/reducemeshparameters/</guid>
      <description>Namespace: Rhino.Geometry
Parameters for Reduce method
public class ReduceMeshParametersConstructors  ReduceMeshParameters() Constructs a polygon reduction parameter object with default values. Users of this class should not rely on default values to stay constant across service releases. since 6.0  Properties  int Accuracy Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results since 6.0 bool AllowDistortion If True mesh appearance is not changed even if the target polygon count is not reached since 6.</description>
    </item>
    
    <item>
      <title>RevSurface</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/revsurface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/revsurface/</guid>
      <description>Namespace: Rhino.Geometry
Represents a surface of revolution. Revolutions can be incomplete (they can form arcs).
[Serializable]public class RevSurface : SurfaceProperties  Interval Angle Gets the start and end angles of revolution in radians. The interval angle must be increasing and satisfy RhinoMath.ZeroTolerance &amp;lt; Angle.Length&amp;lt;= 2.0 * System.Math.PI. since 6.0 Line Axis Gets the axis of revolution. since 6.0 Curve Curve Gets the revolute curve. since 6.0  Methods  static RevSurface Create(Curve revoluteCurve,Line axisOfRevolution) Constructs a new surface of revolution from a generatrix curve and an axis.</description>
    </item>
    
    <item>
      <title>RTreeEventArgs</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/rtreeeventargs/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/rtreeeventargs/</guid>
      <description>Namespace: Rhino.Geometry
Represents event data that is passed when when an item that meets certain criteria is found and the passed RTree event is raised.
public class RTreeEventArgs : EventArgsProperties  bool Cancel Gets or sets a value that determines if the search should be conducted farther. int Id Gets the identifier of the found item. int IdB If search is using two r-trees, IdB is element b in the search.</description>
    </item>
    
    <item>
      <title>ShutLiningCurveInfo</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/shutliningcurveinfo/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/shutliningcurveinfo/</guid>
      <description>Namespace: Rhino.Geometry
Contains shutlining curve information. This is used in .
public class ShutLiningCurveInfoConstructors  ShutLiningCurveInfo(Curve curve,double radius,int profile,bool pull,bool isBump,IEnumerablecurveIntervals,bool enabled) Creates a new instance of the ShutLining curve information class. since 6.0  Properties  Curve Curve The profile curve. since 6.0 ReadOnlyCollectionCurveIntervals The parts of the curve to use as profiles. since 6.0 bool Enabled If true, this curve is active. since 6.0 bool IsBump True if profile constitutes a bump.</description>
    </item>
    
    <item>
      <title>SubDFace</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/subdface/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/subdface/</guid>
      <description>Namespace: Rhino.Geometry
Single face of a SubD
public class SubDFace : SubDComponentProperties  int EdgeCount Number of edges for this face. Note that EdgeCount is always the same as VertexCount. Two properties are provided simply for clarity. since 7.0 Point3d LimitSurfaceCenterPoint Get the limit surface point location at the center of the face since 7.0 int VertexCount Number of vertices for this face. Note that EdgeCount is always the same as VertexCount.</description>
    </item>
    
    <item>
      <title>Vector2d</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/vector2d/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/vector2d/</guid>
      <description>Namespace: Rhino.Geometry
Represents the two components of a vector in two-dimensional space, using -precision floating point numbers.
 static - Computes the opposite vector. Returns - A new vector where all components were multiplied by -1. since 6.0 static - Subtracts the second vector from the first one. Returns - A new vector that results from the componentwise difference of vector1 - vector2. since 6.0 static != Determines whether two vectors have different values.</description>
    </item>
    
    <item>
      <title>Vector2f</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/vector2f/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/vector2f/</guid>
      <description>Namespace: Rhino.Geometry
Represents the two components of a vector in two-dimensional space, using -precision floating point numbers.
 static - Computes the difference between two vectors. Returns - The difference. since 6.0 static != Determines whether two vectors have different values. Returns - True if the two vectors differ in any component; False otherwise. static * Multiplies two together, returning the dot (internal) product of the two. Returns - A value that results from the coordinatewise multiplication of point1 and point2.</description>
    </item>
    
    <item>
      <title>Vector3d</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/vector3d/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/vector3d/</guid>
      <description>Namespace: Rhino.Geometry
Represents the three components of a vector in three-dimensional space, using -precision floating point numbers.
 static - Computes the opposite vector. Returns - A new vector where all components were multiplied by -1. static - Subtracts the second vector from the first one. Returns - A new vector that results from the componentwise difference of vector1 - vector2. static != Determines whether two vectors have different values. Returns - True if any coordinate pair is different; False otherwise.</description>
    </item>
    
    <item>
      <title>Vector3f</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/vector3f/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/vector3f/</guid>
      <description>Namespace: Rhino.Geometry
Represents the three components of a vector in three-dimensional space, using -precision floating point numbers.
 static - Subtracts the second vector from the first one. Returns - A new vector that results from the componentwise difference of vector1 - vector2. since 6.0 static - Computes the opposite vector. Returns - A new vector where all components were multiplied by -1. since 6.0 static != Determines whether two vectors have different values.</description>
    </item>
    
    <item>
      <title>VolumeMassProperties</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/volumemassproperties/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:15 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/volumemassproperties/</guid>
      <description>Namespace: Rhino.Geometry
Contains static initialization methods and allows access to the computed metrics of volume, volume centroid and volume moments in in solid meshes, in solid surfaces and in solid (closed) boundary representations.
public class VolumeMassProperties : IDisposableProperties  Point3d Centroid Gets the volume centroid in the world coordinate system. Vector3d CentroidCoordinatesMomentsOfInertia Moments of inertia with respect to centroid coordinate system. X = integral of ((y-y0)^2 + (z-z0)^2) dm Y = integral of ((z-z0)^2 + (x-x0)^2) dm Z = integral of ((z-z0)^2 + (y-y0)^2) dm where (x0,y0,z0) = centroid.</description>
    </item>
    
    <item>
      <title>AnnotationBase</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/annotationbase/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:14 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/annotationbase/</guid>
      <description>Namespace: Rhino.Geometry
Provides a common base class to all annotation geometry. This class refers to the geometric element that is independent from the document.
[Serializable]public class AnnotationBase : GeometryBaseProperties  LengthDisplay AlternateDimensionLengthDisplay Alternate length display units and format since 6.0 AnnotationType AnnotationType Type of annotation since 6.0 char DecimalSeparator Set or get the decimal separator c since 7.0 LengthDisplay DimensionLengthDisplay Length display units and format since 6.0 double DimensionScale Gets or sets the dimension scale since 6.</description>
    </item>
    
    <item>
      <title>ArcCurve</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/arccurve/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:14 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/arccurve/</guid>
      <description>Namespace: Rhino.Geometry
Represent arcs and circles. ArcCurve.IsCircle returns True if the curve is a complete circle.
[Serializable]public class ArcCurve : CurveConstructors  ArcCurve() Initializes a new instance. Radius is set to 1, position to Origin and Domain to full span (circle). ArcCurve(Arc arc) Initializes a new instance, copying values from another . ArcCurve(Arc arc,double t0,double t1) Initializes a new instance, copying values from another and specifying the needed parametrization of the arc.</description>
    </item>
    
    <item>
      <title>TextDot</title>
      <link>/apidocs/hugo/rhinocommon/rhino/geometry/textdot/</link>
      <pubDate>Wed, 11 Mar 2020 15:34:14 +0000</pubDate>
      
      <guid>/apidocs/hugo/rhinocommon/rhino/geometry/textdot/</guid>
      <description>Namespace: Rhino.Geometry
Represents a text dot, or an annotation entity with text that always faces the camera and always has the same size. This class refers to the geometric element that is independent from the document.
[Serializable]public class TextDot : GeometryBaseConstructors  TextDot(string text,Point3d location) Initializes a new textdot based on the text and the location.  Properties  string FontFace Font face used for displaying the dot since 5.</description>
    </item>
    
  </channel>
</rss>